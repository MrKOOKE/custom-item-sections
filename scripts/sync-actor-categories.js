/**
 * –ú–∞–∫—Ä–æ—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É –∞–∫—Ç–µ—Ä–æ–≤
 * 
 * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —É –∞–∫—Ç–µ—Ä–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∏—Ö
 * —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å
 */

const MODULE_ID = 'custom-item-sections';
const FLAGS = {
  SECTION: 'section'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
function findGlobalItem(itemName) {
  // –ò—â–µ–º –≤ –º–∏—Ä–µ
  const worldItem = game.items.getName(itemName);
  if (worldItem) {
    return worldItem;
  }
  
  // –ò—â–µ–º –≤ –∫–æ–º–ø–µ–Ω–¥–∏—É–º–∞—Ö
  for (const pack of game.packs) {
    if (pack.documentName === 'Item') {
      try {
        const item = pack.index.getName(itemName);
        if (item) {
          return pack.getDocument(item._id);
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }
  }
  
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
async function syncItemCategory(actorItem, globalItem) {
  try {
    const globalCategory = globalItem.getFlag(MODULE_ID, FLAGS.SECTION);
    
    if (globalCategory) {
      await actorItem.setFlag(MODULE_ID, FLAGS.SECTION, globalCategory);
      console.log(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${globalCategory}" –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ "${actorItem.name}" —É –∞–∫—Ç–µ—Ä–∞ "${actorItem.parent.name}"`);
      return true;
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ "${actorItem.name}":`, error);
  }
  
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–∫—Ç–µ—Ä–æ–≤
async function syncAllActors() {
  const actors = game.actors.contents;
  let totalItems = 0;
  let syncedItems = 0;
  let skippedItems = 0;
  let errorItems = 0;
  
  console.log(`–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è ${actors.length} –∞–∫—Ç–µ—Ä–æ–≤...`);
  
  for (const actor of actors) {
    console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–µ—Ä–∞: ${actor.name} (${actor.type})`);
    
    const items = actor.items.contents;
    totalItems += items.length;
    
    for (const item of items) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É –ø—Ä–µ–¥–º–µ—Ç–∞ –∞–∫—Ç–µ—Ä–∞
      const existingCategory = item.getFlag(MODULE_ID, FLAGS.SECTION);
      
      if (existingCategory) {
        console.log(`  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "${item.name}" - —É–∂–µ –∏–º–µ–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${existingCategory}"`);
        skippedItems++;
        continue;
      }
      
      // –ò—â–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞
      const globalItem = await findGlobalItem(item.name);
      
      if (!globalItem) {
        console.log(`  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "${item.name}" - –≥–ª–æ–±–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        skippedItems++;
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É –≥–ª–æ–±–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
      const globalCategory = globalItem.getFlag(MODULE_ID, FLAGS.SECTION);
      
      if (!globalCategory) {
        console.log(`  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "${item.name}" - –≥–ª–æ–±–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –∏–º–µ–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
        skippedItems++;
        continue;
      }
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const success = await syncItemCategory(item, globalItem);
      
      if (success) {
        syncedItems++;
      } else {
        errorItems++;
      }
    }
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const message = `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
    `‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${totalItems}\n` +
    `‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${syncedItems}\n` +
    `‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedItems}\n` +
    `‚Ä¢ –û—à–∏–±–æ–∫: ${errorItems}`;
  
  console.log(message);
  
  if (syncedItems > 0) {
    ui.notifications.info(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${syncedItems} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏`);
  } else {
    ui.notifications.warn('–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
  }
  
  return { totalItems, syncedItems, skippedItems, errorItems };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
async function previewSync() {
  const actors = game.actors.contents;
  let previewData = [];
  
  console.log(`–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${actors.length} –∞–∫—Ç–µ—Ä–æ–≤...`);
  
  for (const actor of actors) {
    const actorItems = [];
    
    for (const item of actor.items.contents) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      const existingCategory = item.getFlag(MODULE_ID, FLAGS.SECTION);
      
      if (existingCategory) {
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      }
      
      // –ò—â–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
      const globalItem = await findGlobalItem(item.name);
      
      if (globalItem) {
        const globalCategory = globalItem.getFlag(MODULE_ID, FLAGS.SECTION);
        
        if (globalCategory) {
          actorItems.push({
            name: item.name,
            type: item.type,
            globalCategory: globalCategory
          });
        }
      }
    }
    
    if (actorItems.length > 0) {
      previewData.push({
        actor: actor.name,
        actorType: actor.type,
        items: actorItems
      });
    }
  }
  
  return previewData;
}

// –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
async function showSyncDialog() {
  const content = `
    <form>
      <p>–≠—Ç–æ—Ç –º–∞–∫—Ä–æ—Å –Ω–∞–π–¥–µ—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —É –∞–∫—Ç–µ—Ä–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∏—Ö —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.</p>
      
      <div class="form-group">
        <label>
          <input type="checkbox" id="previewOnly" name="previewOnly" checked>
          –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        </label>
        <p class="notes">–ï—Å–ª–∏ –æ—Ç–º–µ—á–µ–Ω–æ, –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π</p>
      </div>
    </form>
  `;

  const dialog = new Dialog({
    title: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤',
    content: content,
    buttons: {
      preview: {
        label: '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä',
        callback: async (html) => {
          const previewOnly = html.find('#previewOnly').is(':checked');
          
          if (previewOnly) {
            const previewData = await previewSync();
            
            if (previewData.length === 0) {
              ui.notifications.warn('–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
              return;
            }
            
            let previewContent = '<h3>–ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:</h3>';
            
            for (const actorData of previewData) {
              previewContent += `<h4>${actorData.actor} (${actorData.actorType})</h4>`;
              previewContent += '<ul>';
              
              for (const item of actorData.items) {
                previewContent += `<li><strong>${item.name}</strong> (${item.type}) ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${item.globalCategory}"</li>`;
              }
              
              previewContent += '</ul>';
            }
            
            const previewDialog = new Dialog({
              title: '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
              content: `<div style="max-height: 400px; overflow-y: auto;">${previewContent}</div>`,
              buttons: {
                sync: {
                  label: '–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é',
                  callback: async () => {
                    await syncAllActors();
                  }
                },
                cancel: {
                  label: '–û—Ç–º–µ–Ω–∞'
                }
              }
            });
            
            previewDialog.render(true);
          } else {
            await syncAllActors();
          }
        }
      },
      sync: {
        label: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å',
        callback: async (html) => {
          const previewOnly = html.find('#previewOnly').is(':checked');
          
          if (!previewOnly) {
            await syncAllActors();
          }
        }
      },
      cancel: {
        label: '–û—Ç–º–µ–Ω–∞'
      }
    },
    default: 'preview',
    close: () => {}
  });

  dialog.render(true);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥
showSyncDialog(); 